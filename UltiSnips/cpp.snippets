snippet starter "C++ Starter Program" b
#include <iostream>
using namespace std;

int main() {
	return 0;
}
endsnippet

snippet adjlist "Adjacency List" b
int n, m; 
cin >> n >> m;
vector<vector<int>> adj(n, vector<int>());
for (int i = 0; i < m; i++) {
	int u, v; 
	cin >> u >> v;
	adj[u].push_back(v);
	adj[v].push_back(u); // remove if directed
}
endsnippet

snippet array "Array" b
int N; cin >> N;
vector<int> v(N);
for(int i = 0; i<N; i++){
	cin >> v[i];
}
endsnippet

snippet 2list "Vector of 2-Element Lists"
int M; cin >> M;
vector<vector<int>> v(M, vector<int>(2));
for(int i = 0; i < M; i++){
	cin >> v[i][0] >> v[i][1];
}
endsnippet

snippet 2darray "2D Array" b
int M, N; cin >> M >> N;
vector<vector<int>> v(M, vector<int>(N));
for (int i = 0; i < M; i++) {
	for (int j = 0; j < N; j++) {
		cin >> v[i][j];
	}
}
endsnippet

snippet adjlistw "Weighted Adjacency List" b
int n, m;
cin >> n >> m;
vector<vector<pair<int,int>>> adj(n);
for (int i = 0; i < m; i++) {
	int u, v, w;
	cin >> u >> v >> w;
	adj[u].push_back({v, w});
	adj[v].push_back({u, w}); // remove if directed
}
endsnippet

snippet sll "Singly Linked List" b
struct ListNode {
	int val;
	ListNode *next;
	ListNode() : val(0), next(nullptr) {}
	ListNode(int x) : val(x), next(nullptr) {}
	ListNode(int x, ListNode *next) : val(x), next(next) {}
};
endsnippet

snippet tree "Binary Tree" b
struct TreeNode {
	int val;
	TreeNode *left;
	TreeNode *right;
	TreeNode() : val(0), left(nullptr), right(nullptr) {}
	TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
	TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
}
endsnippet

